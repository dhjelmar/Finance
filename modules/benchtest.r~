benchtest <- function(symbol, bench, period='months') {

    ## get history
    out <- equityhistory(symbol, period=period)  # 50 works, 60 does not
    twr <- out$twr
    benchtwr <- equityhistory(bench, period=period)$twr

    ## combine twr and benchmarks to line up dates and remove NA
    both <- na.omit( cbind(twr, benchtwr) )

    ## strip out 1-year, 3-year, and 5-year histories, if available
    both1 <- xts::last(both, '1 year')
    both3 <- xts::last(both, '3 years')
    both5 <- xts::last(both, '5 years')

    ## 
    twr1       <- as.numeric( both1[, 1] )
    benchmark1 <- as.numeric( both1[, 2] )
    twr3       <- as.numeric( both3[, 1] )
    benchmark3 <- as.numeric( both3[, 2] )
    twr5       <- as.numeric( both5[, 1] )
    benchmark5 <- as.numeric( both5[, 2] )

    plotspace(3,2)
        
    ## calculate alpha and beta for each symbol
    ## plot incremental and cumulative returns
        dates <- zoo::index(twr)
        rownames(dftemp) <- dates
        colnames(dftemp) <- c(symbol[i], benchname)
        xtsinc <- xts::as.xts(dftemp)
        print( plotxts(xtsinc, main="Incremental TWR") )    # oddly "print" is needed in a loop
        xtscum <- cumprod(xtsinc+1)-1
        print( plotxts(xtscum, main="Cumulative TWR") )
        
        
        ## determine alpha and beta for symbol i
        out <- alpha_beta(twr_symbol, bench_symbol, 
                          plot = TRUE, 
                          xlabel = paste('Incremental TWR for', benchname, sep=' '),
                          ylabel = paste('Incremental TWR for', symbol[i], sep=' '),
                          range  = range(twr, benchmark, na.rm = TRUE),
                          main   = symbolname[i])
        twrcum   <- prod(twr_symbol + 1) - 1
        benchcum <- prod(bench_symbol + 1) - 1
        mtext(paste('TWR Cum = ', signif(twrcum,4)*100, '%;',
                    'Benchmark Cum = ', signif(benchcum, 4)*100, '%',
                    sep=''), 
              side=3, line=0, cex=0.75)
        alpha[i] <- out$alpha
        beta[i]  <- out$beta

        ## determine twr for symbol i
        twri[i]  <- prod(twr_symbol+1)-1

        ## plot histogram of alpha and beta for symbol 1
        out <- hist_nwj(twr_symbol, type='nj', upperbound=FALSE,
                        main="Histogram of Incremental Returns")
        abline(v=mean(twr_symbol), col='red', lwd=1)
        out <- qqplot_nwj(twr_symbol, type='n')
        out <- qqplot_nwj(twr_symbol, type='j')
        
    }
    stats <- data.frame(symbol,
                        name = symbolname,
                        shares = as.numeric(shares), 
                        value=as.numeric(value), 
                        twr  = twri,
                        beta, 
                        alpha)
    ## sort from low to high twr
    stats <- stats[order(stats$twr),]

    ## calculate portfolio beta
    beta_portfolio  <- sum( weight * beta  )
    alpha_portfolio <- sum( weight * alpha )
    twr_portfolio   <- sum( weight * twri  )
    portfolio <- data.frame(symbol  = dfname, 
                            name   = 'portfolio',
                            shares = NA, 
                            value  = totalvalue, 
                            twr    = twr_portfolio,
                            beta   = beta_portfolio,
                            alpha  = alpha_portfolio)
    stats <- rbind(stats, portfolio)
    print(stats)

    ## plot portfolio
    plotspace(1,2)
    out <- plotfit(stats$alpha, stats$beta, stats$symbol, nofit=TRUE)
    ## xx <- stats[nrow(stats),]$beta
    ## yy <- stats[nrow(stats),]$alpha
    ## color <- as.character(out$legend[nrow(out$legend),]$color)
    ## points(xx, yy, pch=16, col=color)
    out <- plotfit(stats$alpha, stats$twr, stats$symbol, nofit=TRUE)

    ## any correlation between alpha, beta, and twr?
    abtwr <- select(stats, twr, alpha, beta)
    pairsdf(abtwr)

    ## ## plot interactive
    ## if (os == 'windows') {
    ##     ## following uses plotly which does not work on Chromebook
    ##     plot_interactive(stats, 'beta', 'alpha')
    ## }

    library(shiny)
    shinyplot(as.data.frame(stats), 'beta', 'alpha')
}
